from pydantic import BaseModel, ConfigDict
from pydantic.fields import FieldInfo
from datetime import datetime

from typing import List, Dict, Optional

{% for model in models %}
class {{ model.name }}(BaseModel):
    model_config = ConfigDict(extra='ignore', from_attributes=True)

    {% for field in model.fields %}{{ field.row }}
    {% endfor %}

    def to_dict(self) -> Dict:
        return self.dict()

class {{ model.name }}Query(BaseModel):
    model_config = ConfigDict(extra='ignore', from_attributes=True)

    {% for field in model.fields %}{{ field.name }}: Optional[{{ field.type }}] = None
    {% endfor %}

    def to_dict(self) -> Dict:
        return self.dict()
{% endfor %}
