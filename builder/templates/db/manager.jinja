""" Template for alembic model manager, includes the following endpoints:
- create_model
- create_models
- get_model
- get_models
- update_model
- delete_model
"""

import logging

from datetime import datetime
from typing import List

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from db.constants import DB_URL
from db.models import {{ model.name }}DBModel


class {{ model.name }}Manager:
    """{{ model.name }} manager to handle all database operations for the {{ model.name }} records."""

    def __init__(self):
        """Initialize the CaseManager."""
        engine = create_engine(DB_URL)
        self.session_factory = sessionmaker(bind=engine)
        logging.info("CaseManager successfully initialized")

    def create_model(self, data: dict) -> {{ model.name }}DBModel:
    """Create a new {{ model.name }} record in the database."""
        logging.info(f"Creating new {{ model.name }} record: {data}")
        try:
            with self.session_factory() as session:
                # Create a new {{ model.name }} record
                new_{{ model.name }} = CaseDBModel(**data)

                # Add the new {{ model.name }} record to the session and commit
                session.add(new_{{ model.name }})
                session.commit()

                # Refresh and return the new {{ model.name }} record
                session.refresh(new_{{ model.name }})
                logging.info(f"Successfully created new {{ model.name }} record: {new_{{ model.name }}})
                return new_{{ model.name }}
        except Exception as e:
            logging.error(f"Failed to create new {{ model.name }} record: {e}")
            raise e
        finally:
            self.close_session()

    def close_session(self):
        """This method is now redundant since each action opens and closes its session."""
        pass
