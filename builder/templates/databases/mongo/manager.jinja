import uuid
import logging
from typing import List, Union
from models.models import {{ model.name }}, {{ model.name }}Query
from db.utils import get_collection, get_client

logger = logging.getLogger(__name__)

# Singleton Manager for {{ model.name }}
__{{ model.name.upper()}}_MANAGER = None
def get_{{ model.name.lower() }}_manager():
    global __{{ model.name.upper()}}_MANAGER
    if not __{{ model.name.upper()}}_MANAGER:
        __{{ model.name.upper()}}_MANAGER = {{ model.name }}Manager()
    return __{{ model.name.upper()}}_MANAGER

class {{ model.name }}Manager:

    collection_name: str = "{{ model.name.lower() }}"

    def __init__(self):
        self.client = get_client()
        self.collection = get_collection(self.client, self.collection_name)

    def generate_id(self) -> Union[str, int]:
        """ Generate a new id for the User """
        return str(uuid.uuid4())
        
    ########################################################
    # Query Operations                                     #
    ########################################################

    def query(self, query: {{ model.name }}Query) -> List[{{ model.name }}]:
        """ Query {{ model.name }} """
        logger.info("Querying {{ model.name }}: {}".format(query))
        try:
            # Build query
            query_dict = query.model_dump(mode="json")
            return list(self.collection.find(query_dict))
        except Exception as e:
            logger.error(f"Error querying {{ model.name }}: {e}")
            raise f"Error querying {{ model.name }}: {e}"

    ########################################################
    # Create Operations                                    #
    ########################################################

    def create(self, model: {{ model.name }}) -> {{ model.name }}:
        """ Create a new {{ model.name }} """
        logger.info("Creating {{ model.name }}: {}".format(model))
        try:
            # Generate id for the model
            if not model.id:
                model.id = self.generate_id()

            # Insert into database
            self.collection.insert_one(model.model_dump(mode="json"))

            # Return the created {{ model.name }}
            return model
        except Exception as e:
            logger.error(f"Error creating {{ model.name }}: {e}")
            raise f"Error creating {{ model.name }}: {e}"

    def create_many(self, model_list: List[{{ model.name }}]) -> List[{{ model.name }}]:
        """ Create a list of {{ model.name }} """
        logger.info("Creating {{ model.name }}: {}".format(model_list))
        try:
            # Generate ids for the models
            for model in model_list:
                if not model.id:
                    model.id = self.generate_id()

            # Insert into database
            self.collection.insert_many([model.model_dump(mode="json") for model in model_list])

            # Return the {{ model.name }} list
            return model_list
        except Exception as e:
            logger.error(f"Error creating {{ model.name }}s: {e}")
            raise f"Error creating {{ model.name }}s: {e}"


    ########################################################
    # Read Operations                                      #
    ########################################################


    def get(self, model_id: str) -> {{ model.name }}:
        """ Get a {{ model.name }} by its id """
        logger.info("Getting {{ model.name }}: {}.format(model_id)")
        try:
            return self.collection.find_one({'id': model_id})
        except Exception as e:
            logger.error(f"Error getting {{ model.name }}: {e}")
            raise f"Error getting {{ model.name }}: {e}"


    def get_many(self, model_ids: List[str]) -> List[{{ model.name }}]:
        """ Get a list of {{ model.name }} by their ids """
        logger.info("Getting {{ model.name }}: {}".format(model_ids))
        try:
            return list(self.collection.find({'id': {'$in': model_ids}}))
        except Exception as e:
            logger.error(f"Error getting {{ model.name }}s: {e}")
            raise f"Error getting {{ model.name }}s: {e}"


    def get_all(self) -> List[{{ model.name }}]:
        """ Get all {{ model.name }} """
        logger.info(f"Getting all {{ model.name }}")
        try:
            return list(self.collection.find())
        except Exception as e:
            logger.error(f"Error getting all {{ model.name }}: {e}")
            raise f"Error getting all {{ model.name }}: {e}"

    ########################################################
    # Update Operations                                    #
    ########################################################


    def update(self, model: {{ model.name }}) -> {{ model.name }}:
        """ Update a {{ model.name }} """
        logger.info("Updating {{ model.name }}: {}".format(model))
        try:
            # Raise error if id is not present on the model
            if not model.id:
                raise Exception("{{ model.name }} id is required")

            # Update
            self.collection.update_one(
                {'id': model.id},
                {'$set': model.model_dump(mode="json")}
            )

            # Return new copy
            return self.get(model.id)
        except Exception as e:
            logger.error(f"Error updating {{ model.name }}: {e}")
            raise f"Error updating {{ model.name }}: {e}"


    def update_many(self, model_list: List[{{ model.name }}]) -> List[{{ model.name }}]:
        """ Update a list of {{ model.name }} """
        logger.info("Updating {{ model.name }}: {}".format(model_list))
        try:
            # Update
            for model in model_list:
                self.update(model)

            # Return new copies
            return self.get_many([model.id for model in model_list])
        except Exception as e:
            logger.error(f"Error updating {{ model.name }}s: {e}")
            raise f"Error updating {{ model.name }}s: {e}"


    ########################################################
    # Delete Operations                                    #
    ########################################################


    def delete(self, model_id: str) -> {{ model.name }}:
        """ Delete a {{ model.name }} """
        logger.info("Deleting {{ model.name }}: {}".format(model_id))
        try:
            # Find in database
            obj = self.get(model_id)
            if not obj:
                raise Exception("{{ model.name }} not found")

            # Delete if found
            self.collection.delete_one({'id': model_id})

            # Return the deleted object
            return obj
        except Exception as e:
            logger.error(f"Error deleting {{ model.name }}: {e}")
            raise f"Error deleting {{ model.name }}: {e}"


    def delete_many(self, model_ids: List[str]) -> List[{{ model.name }}]:
        """ Delete a list of {{ model.name }} """
        logger.info("Deleting {{ model.name }}: {}".format(model_ids))
        try:
            # Find in database
            objs = self.get_many(model_ids)
            if not objs:
                raise Exception("{{ model.name }}s not found")
            if len(objs) != len(model_ids):
                raise Exception("Some {{ model.name }}s not found")

            # Delete if found
            self.collection.delete_many({'id': {'$in': model_ids}})

            # Return the deleted objects
            return objs
        except Exception as e:
            logger.error(f"Error deleting {{ model.name }}s: {e}")
            raise f"Error deleting {{ model.name }}s: {e}"
