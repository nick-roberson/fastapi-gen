import logging
from datetime import datetime
from typing import List

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from src.db.constants import get_url
from src.models.models import {{ model.name }}, {{ model.name }}Query
from src.db.models import DB{{ model.name }}

def get_{{ model.name.lower() }}_manager() -> "{{ model.name }}Manager":
    """ Get the {{ model.name }} manager instance. """
    return {{ model.name }}Manager()

class {{ model.name }}Manager:
    """Manager to handle all database operations for the {{ model.name }} records."""
    _session_factory = None

    @classmethod
    def get_session_factory(cls):
        if cls._session_factory is None:
            engine = create_engine(get_url())
            cls._session_factory = sessionmaker(bind=engine)
            logging.info("Database engine and session factory initialized")
        return cls._session_factory

    def query(self, query: {{ model.name }}Query) -> List[{{ model.name }}]:
        """Query the {{ model.name }} records from the database."""
        logging.info(f"Querying {{ model.name }} records: {query}")
        session_factory = self.get_session_factory()
        try:
            with session_factory() as session:
                query_builder = session.query(DB{{ model.name }})
                for key, value in query.model_dump().items():
                    if value is not None:
                        query_builder = query_builder.filter(getattr(DB{{ model.name }}, key) == value)
                items = query_builder.all()
                return [{{ model.name }}.from_orm(item) for item in items] if items else []

        except Exception as e:
            logging.error(f"Failed to query {{ model.name }} records: {e}")
            raise

    def get(self, model_id: int) -> {{ model.name }}:
        """Retrieve a {{ model.name }} record from the database by its ID."""
        logging.info(f"Retrieving {{ model.name }} record with ID: {model_id}")
        session_factory = self.get_session_factory()
        try:
            with session_factory() as session:
                item = session.query(DB{{ model.name }}).get(model_id)
                if not item:
                    return None
                return {{ model.name }}.from_orm(item)

        except Exception as e:
            logging.error(f"Failed to retrieve {{ model.name }} record: {e}")
            raise

    def get_many(self, model_ids: List[int]) -> List[{{ model.name }}]:
        """Retrieve multiple {{ model.name }} records from the database by their IDs."""
        logging.info(f"Retrieving multiple {{ model.name }} records with IDs: {model_ids}")
        session_factory = self.get_session_factory()
        try:
            with session_factory() as session:
                items = session.query(DB{{ model.name }}).filter(DB{{ model.name }}.id.in_(model_ids)).all()
                return [{{ model.name }}.from_orm(item) for item in items] if items else []

        except Exception as e:
            logging.error(f"Failed to retrieve multiple {{ model.name }} records: {e}")
            raise

    def get_all(self, skip: int = 0, limit: int = 0) -> List[{{ model.name }}]:
        """Retrieve all {{ model.name }} records from the database."""
        logging.info(f"Retrieving all {{ model.name }} records")
        session_factory = self.get_session_factory()
        try:
            # Get models with pagination enabled
            with session_factory() as session:
                items = session.query(DB{{ model.name }}).offset(skip).limit(limit).all()
                return [{{ model.name }}.from_orm(item) for item in items] if items else []

        except Exception as e:
            logging.error(f"Failed to retrieve all {{ model.name }} records: {e}")
            raise

    def create(self, model: {{ model.name }}) -> {{ model.name }}:
        """Create a new {{ model.name }} record in the database."""
        logging.info(f"Creating new {{ model.name }} record: {model}")
        session_factory = self.get_session_factory()
        try:
            with session_factory() as session:
                new_item = DB{{ model.name }}(**model.model_dump())
                new_item.id = None  # Ensuring it's treated as a new record
                session.add(new_item)
                session.commit()
                session.refresh(new_item)
                return {{ model.name }}.from_orm(new_item)

        except Exception as e:
            logging.error(f"Failed to create new {{ model.name }} record: {e}")
            raise

    def create_many(self, model_list: List[{{ model.name }}]) -> List[{{ model.name }}]:
        """Create multiple new {{ model.name }} records in the database."""
        logging.info(f"Creating multiple new {{ model.name }} records: {model_list}")
        session_factory = self.get_session_factory()
        try:
            with session_factory() as session:
                new_items = [DB{{ model.name }}(**model.model_dump()) for model in model_list]
                for item in new_items:
                    item.id = None
                session.add_all(new_items)
                session.commit()
                for item in new_items:
                    session.refresh(item)
                return [{{ model.name }}.from_orm(item) for item in new_items]

        except Exception as e:
            logging.error(f"Failed to create multiple new {{ model.name }} records: {e}")
            raise

    def update(self, model: {{ model.name }}) -> {{ model.name }}:
        """Update an existing {{ model.name }} record in the database."""
        logging.info(f"Updating {{ model.name }} record with ID {model.id}: {model}")
        session_factory = self.get_session_factory()
        try:
            with session_factory() as session:
                item = session.query(DB{{ model.name }}).get(model.id)
                if not item:
                    raise Exception("{{ model.name }} record does not exist")
                for key, value in model.model_dump().items():
                    setattr(item, key, value)
                item.updated_at = datetime.now()
                session.commit()
                session.refresh(item)
                return {{ model.name }}.from_orm(item)

        except Exception as e:
            logging.error(f"Failed to update {{ model.name }} record: {e}")
            raise

    def update_many(self, model_list: List[{{ model.name }}]) -> List[{{ model.name }}]:
        """Update multiple existing {{ model.name }} records in the database."""
        logging.info(f"Updating multiple {{ model.name }} records: {model_list}")
        session_factory = self.get_session_factory()
        try:
            with session_factory() as session:
                model_ids = [model.id for model in model_list]
                items = session.query(DB{{ model.name }}).filter(DB{{ model.name }}.id.in_(model_ids)).all()
                if len(items) != len(model_ids):
                    raise Exception("Some {{ model.name }} records do not exist")
                item_map = {item.id: item for item in items}
                for model in model_list:
                    item = item_map[model.id]
                    for key, value in model.model_dump().items():
                        setattr(item, key, value)
                    item.updated_at = datetime.now()
                session.commit()
                for item in items:
                    session.refresh(item)
                return [{{ model.name }}.from_orm(item) for item in items]

        except Exception as e:
            logging.error(f"Failed to update multiple {{ model.name }} records: {e}")
            raise

    def delete(self, model_id: int) -> {{ model.name }}:
        """Delete a {{ model.name }} record from the database by its ID."""
        logging.info(f"Deleting {{ model.name }} record with ID: {model_id}")
        session_factory = self.get_session_factory()
        try:
            with session_factory() as session:
                item = session.query(DB{{ model.name }}).get(model_id)
                if not item:
                    raise Exception("{{ model.name }} record does not exist")
                session.delete(item)
                session.commit()
                return {{ model.name }}.from_orm(item)

        except Exception as e:
            logging.error(f"Failed to delete {{ model.name }} record: {e}")
            raise

    def delete_many(self, model_ids: List[int]) -> List[{{ model.name }}]:
        """Delete multiple {{ model.name }} records from the database by their IDs."""
        logging.info(f"Deleting multiple {{ model.name }} records with IDs: {model_ids}")
        session_factory = self.get_session_factory()
        try:
            with session_factory() as session:
                items = session.query(DB{{ model.name }}).filter(DB{{ model.name }}.id.in_(model_ids)).all()
                if len(items) != len(model_ids):
                    raise Exception("Some {{ model.name }} records do not exist")
                for item in items:
                    session.delete(item)
                session.commit()
                return [{{ model.name }}.from_orm(item) for item in items]

        except Exception as e:
            logging.error(f"Failed to delete multiple {{ model.name }} records: {e}")
            raise
