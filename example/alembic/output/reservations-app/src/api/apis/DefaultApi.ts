/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  HTTPValidationError,
  Reservation,
  Restaurant,
  Review,
  User,
} from "../models/index";
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  ReservationFromJSON,
  ReservationToJSON,
  RestaurantFromJSON,
  RestaurantToJSON,
  ReviewFromJSON,
  ReviewToJSON,
  UserFromJSON,
  UserToJSON,
} from "../models/index";

export interface CreateReservationAsyncReservationAsyncPostRequest {
  reservation: Reservation;
}

export interface CreateReservationReservationPostRequest {
  reservation: Reservation;
}

export interface CreateReservationsAsyncReservationsAsyncPostRequest {
  reservation: Array<Reservation>;
}

export interface CreateReservationsReservationsPostRequest {
  reservation: Array<Reservation>;
}

export interface CreateRestaurantAsyncRestaurantAsyncPostRequest {
  restaurant: Restaurant;
}

export interface CreateRestaurantRestaurantPostRequest {
  restaurant: Restaurant;
}

export interface CreateRestaurantsAsyncRestaurantsAsyncPostRequest {
  restaurant: Array<Restaurant>;
}

export interface CreateRestaurantsRestaurantsPostRequest {
  restaurant: Array<Restaurant>;
}

export interface CreateReviewAsyncReviewAsyncPostRequest {
  review: Review;
}

export interface CreateReviewReviewPostRequest {
  review: Review;
}

export interface CreateReviewsAsyncReviewsAsyncPostRequest {
  review: Array<Review>;
}

export interface CreateReviewsReviewsPostRequest {
  review: Array<Review>;
}

export interface CreateUserAsyncUserAsyncPostRequest {
  user: User;
}

export interface CreateUserUserPostRequest {
  user: User;
}

export interface CreateUsersAsyncUsersAsyncPostRequest {
  user: Array<User>;
}

export interface CreateUsersUsersPostRequest {
  user: Array<User>;
}

export interface DeleteReservationAsyncReservationAsyncDeleteRequest {
  reservationId: string;
}

export interface DeleteReservationReservationDeleteRequest {
  reservationId: string;
}

export interface DeleteReservationsAsyncReservationsAsyncDeleteRequest {
  requestBody: Array<string>;
}

export interface DeleteReservationsReservationsDeleteRequest {
  requestBody: Array<string>;
}

export interface DeleteRestaurantAsyncRestaurantAsyncDeleteRequest {
  restaurantId: string;
}

export interface DeleteRestaurantRestaurantDeleteRequest {
  restaurantId: string;
}

export interface DeleteRestaurantsAsyncRestaurantsAsyncDeleteRequest {
  requestBody: Array<string>;
}

export interface DeleteRestaurantsRestaurantsDeleteRequest {
  requestBody: Array<string>;
}

export interface DeleteReviewAsyncReviewAsyncDeleteRequest {
  reviewId: string;
}

export interface DeleteReviewReviewDeleteRequest {
  reviewId: string;
}

export interface DeleteReviewsAsyncReviewsAsyncDeleteRequest {
  requestBody: Array<string>;
}

export interface DeleteReviewsReviewsDeleteRequest {
  requestBody: Array<string>;
}

export interface DeleteUserAsyncUserAsyncDeleteRequest {
  userId: string;
}

export interface DeleteUserUserDeleteRequest {
  userId: string;
}

export interface DeleteUsersAsyncUsersAsyncDeleteRequest {
  requestBody: Array<string>;
}

export interface DeleteUsersUsersDeleteRequest {
  requestBody: Array<string>;
}

export interface GetReservationReservationGetRequest {
  reservationId: string;
}

export interface GetRestaurantRestaurantGetRequest {
  restaurantId: string;
}

export interface GetReviewReviewGetRequest {
  reviewId: string;
}

export interface GetUserUserGetRequest {
  userId: string;
}

export interface UpdateReservationAsyncReservationAsyncPutRequest {
  reservation: Reservation;
}

export interface UpdateReservationReservationPutRequest {
  reservation: Reservation;
}

export interface UpdateReservationsAsyncReservationsAsyncPutRequest {
  reservation: Array<Reservation>;
}

export interface UpdateReservationsReservationsPutRequest {
  reservation: Array<Reservation>;
}

export interface UpdateRestaurantAsyncRestaurantAsyncPutRequest {
  restaurant: Restaurant;
}

export interface UpdateRestaurantRestaurantPutRequest {
  restaurant: Restaurant;
}

export interface UpdateRestaurantsAsyncRestaurantsAsyncPutRequest {
  restaurant: Array<Restaurant>;
}

export interface UpdateRestaurantsRestaurantsPutRequest {
  restaurant: Array<Restaurant>;
}

export interface UpdateReviewAsyncReviewAsyncPutRequest {
  review: Review;
}

export interface UpdateReviewReviewPutRequest {
  review: Review;
}

export interface UpdateReviewsAsyncReviewsAsyncPutRequest {
  review: Array<Review>;
}

export interface UpdateReviewsReviewsPutRequest {
  review: Array<Review>;
}

export interface UpdateUserAsyncUserAsyncPutRequest {
  user: User;
}

export interface UpdateUserUserPutRequest {
  user: User;
}

export interface UpdateUsersAsyncUsersAsyncPutRequest {
  user: Array<User>;
}

export interface UpdateUsersUsersPutRequest {
  user: Array<User>;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Create a Reservation asynchronously
   * Create Reservation Async
   */
  async createReservationAsyncReservationAsyncPostRaw(
    requestParameters: CreateReservationAsyncReservationAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["reservation"] == null) {
      throw new runtime.RequiredError(
        "reservation",
        'Required parameter "reservation" was null or undefined when calling createReservationAsyncReservationAsyncPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reservation/async`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ReservationToJSON(requestParameters["reservation"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create a Reservation asynchronously
   * Create Reservation Async
   */
  async createReservationAsyncReservationAsyncPost(
    requestParameters: CreateReservationAsyncReservationAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createReservationAsyncReservationAsyncPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create a Reservation
   * Create Reservation
   */
  async createReservationReservationPostRaw(
    requestParameters: CreateReservationReservationPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Reservation>> {
    if (requestParameters["reservation"] == null) {
      throw new runtime.RequiredError(
        "reservation",
        'Required parameter "reservation" was null or undefined when calling createReservationReservationPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reservation`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ReservationToJSON(requestParameters["reservation"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReservationFromJSON(jsonValue),
    );
  }

  /**
   * Create a Reservation
   * Create Reservation
   */
  async createReservationReservationPost(
    requestParameters: CreateReservationReservationPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Reservation> {
    const response = await this.createReservationReservationPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create multiple Reservations asynchronously
   * Create Reservations Async
   */
  async createReservationsAsyncReservationsAsyncPostRaw(
    requestParameters: CreateReservationsAsyncReservationsAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["reservation"] == null) {
      throw new runtime.RequiredError(
        "reservation",
        'Required parameter "reservation" was null or undefined when calling createReservationsAsyncReservationsAsyncPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reservations/async`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["reservation"]!.map(ReservationToJSON),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create multiple Reservations asynchronously
   * Create Reservations Async
   */
  async createReservationsAsyncReservationsAsyncPost(
    requestParameters: CreateReservationsAsyncReservationsAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createReservationsAsyncReservationsAsyncPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create multiple Reservations
   * Create Reservations
   */
  async createReservationsReservationsPostRaw(
    requestParameters: CreateReservationsReservationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Reservation>>> {
    if (requestParameters["reservation"] == null) {
      throw new runtime.RequiredError(
        "reservation",
        'Required parameter "reservation" was null or undefined when calling createReservationsReservationsPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reservations`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["reservation"]!.map(ReservationToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReservationFromJSON),
    );
  }

  /**
   * Create multiple Reservations
   * Create Reservations
   */
  async createReservationsReservationsPost(
    requestParameters: CreateReservationsReservationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Reservation>> {
    const response = await this.createReservationsReservationsPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create a Restaurant asynchronously
   * Create Restaurant Async
   */
  async createRestaurantAsyncRestaurantAsyncPostRaw(
    requestParameters: CreateRestaurantAsyncRestaurantAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["restaurant"] == null) {
      throw new runtime.RequiredError(
        "restaurant",
        'Required parameter "restaurant" was null or undefined when calling createRestaurantAsyncRestaurantAsyncPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/restaurant/async`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RestaurantToJSON(requestParameters["restaurant"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create a Restaurant asynchronously
   * Create Restaurant Async
   */
  async createRestaurantAsyncRestaurantAsyncPost(
    requestParameters: CreateRestaurantAsyncRestaurantAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createRestaurantAsyncRestaurantAsyncPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create a Restaurant
   * Create Restaurant
   */
  async createRestaurantRestaurantPostRaw(
    requestParameters: CreateRestaurantRestaurantPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Restaurant>> {
    if (requestParameters["restaurant"] == null) {
      throw new runtime.RequiredError(
        "restaurant",
        'Required parameter "restaurant" was null or undefined when calling createRestaurantRestaurantPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/restaurant`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RestaurantToJSON(requestParameters["restaurant"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RestaurantFromJSON(jsonValue),
    );
  }

  /**
   * Create a Restaurant
   * Create Restaurant
   */
  async createRestaurantRestaurantPost(
    requestParameters: CreateRestaurantRestaurantPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Restaurant> {
    const response = await this.createRestaurantRestaurantPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create multiple Restaurants asynchronously
   * Create Restaurants Async
   */
  async createRestaurantsAsyncRestaurantsAsyncPostRaw(
    requestParameters: CreateRestaurantsAsyncRestaurantsAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["restaurant"] == null) {
      throw new runtime.RequiredError(
        "restaurant",
        'Required parameter "restaurant" was null or undefined when calling createRestaurantsAsyncRestaurantsAsyncPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/restaurants/async`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["restaurant"]!.map(RestaurantToJSON),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create multiple Restaurants asynchronously
   * Create Restaurants Async
   */
  async createRestaurantsAsyncRestaurantsAsyncPost(
    requestParameters: CreateRestaurantsAsyncRestaurantsAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createRestaurantsAsyncRestaurantsAsyncPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create multiple Restaurants
   * Create Restaurants
   */
  async createRestaurantsRestaurantsPostRaw(
    requestParameters: CreateRestaurantsRestaurantsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Restaurant>>> {
    if (requestParameters["restaurant"] == null) {
      throw new runtime.RequiredError(
        "restaurant",
        'Required parameter "restaurant" was null or undefined when calling createRestaurantsRestaurantsPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/restaurants`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["restaurant"]!.map(RestaurantToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(RestaurantFromJSON),
    );
  }

  /**
   * Create multiple Restaurants
   * Create Restaurants
   */
  async createRestaurantsRestaurantsPost(
    requestParameters: CreateRestaurantsRestaurantsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Restaurant>> {
    const response = await this.createRestaurantsRestaurantsPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create a Review asynchronously
   * Create Review Async
   */
  async createReviewAsyncReviewAsyncPostRaw(
    requestParameters: CreateReviewAsyncReviewAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling createReviewAsyncReviewAsyncPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/review/async`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ReviewToJSON(requestParameters["review"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create a Review asynchronously
   * Create Review Async
   */
  async createReviewAsyncReviewAsyncPost(
    requestParameters: CreateReviewAsyncReviewAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createReviewAsyncReviewAsyncPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create a Review
   * Create Review
   */
  async createReviewReviewPostRaw(
    requestParameters: CreateReviewReviewPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling createReviewReviewPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/review`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ReviewToJSON(requestParameters["review"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReviewFromJSON(jsonValue),
    );
  }

  /**
   * Create a Review
   * Create Review
   */
  async createReviewReviewPost(
    requestParameters: CreateReviewReviewPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Review> {
    const response = await this.createReviewReviewPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create multiple Reviews asynchronously
   * Create Reviews Async
   */
  async createReviewsAsyncReviewsAsyncPostRaw(
    requestParameters: CreateReviewsAsyncReviewsAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling createReviewsAsyncReviewsAsyncPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reviews/async`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["review"]!.map(ReviewToJSON),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create multiple Reviews asynchronously
   * Create Reviews Async
   */
  async createReviewsAsyncReviewsAsyncPost(
    requestParameters: CreateReviewsAsyncReviewsAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createReviewsAsyncReviewsAsyncPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create multiple Reviews
   * Create Reviews
   */
  async createReviewsReviewsPostRaw(
    requestParameters: CreateReviewsReviewsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Review>>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling createReviewsReviewsPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reviews`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["review"]!.map(ReviewToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReviewFromJSON),
    );
  }

  /**
   * Create multiple Reviews
   * Create Reviews
   */
  async createReviewsReviewsPost(
    requestParameters: CreateReviewsReviewsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Review>> {
    const response = await this.createReviewsReviewsPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create a User asynchronously
   * Create User Async
   */
  async createUserAsyncUserAsyncPostRaw(
    requestParameters: CreateUserAsyncUserAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["user"] == null) {
      throw new runtime.RequiredError(
        "user",
        'Required parameter "user" was null or undefined when calling createUserAsyncUserAsyncPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/user/async`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UserToJSON(requestParameters["user"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create a User asynchronously
   * Create User Async
   */
  async createUserAsyncUserAsyncPost(
    requestParameters: CreateUserAsyncUserAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createUserAsyncUserAsyncPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create a User
   * Create User
   */
  async createUserUserPostRaw(
    requestParameters: CreateUserUserPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters["user"] == null) {
      throw new runtime.RequiredError(
        "user",
        'Required parameter "user" was null or undefined when calling createUserUserPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/user`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UserToJSON(requestParameters["user"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue),
    );
  }

  /**
   * Create a User
   * Create User
   */
  async createUserUserPost(
    requestParameters: CreateUserUserPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.createUserUserPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create multiple Users asynchronously
   * Create Users Async
   */
  async createUsersAsyncUsersAsyncPostRaw(
    requestParameters: CreateUsersAsyncUsersAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["user"] == null) {
      throw new runtime.RequiredError(
        "user",
        'Required parameter "user" was null or undefined when calling createUsersAsyncUsersAsyncPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/users/async`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["user"]!.map(UserToJSON),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create multiple Users asynchronously
   * Create Users Async
   */
  async createUsersAsyncUsersAsyncPost(
    requestParameters: CreateUsersAsyncUsersAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createUsersAsyncUsersAsyncPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create multiple Users
   * Create Users
   */
  async createUsersUsersPostRaw(
    requestParameters: CreateUsersUsersPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<User>>> {
    if (requestParameters["user"] == null) {
      throw new runtime.RequiredError(
        "user",
        'Required parameter "user" was null or undefined when calling createUsersUsersPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/users`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["user"]!.map(UserToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UserFromJSON),
    );
  }

  /**
   * Create multiple Users
   * Create Users
   */
  async createUsersUsersPost(
    requestParameters: CreateUsersUsersPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<User>> {
    const response = await this.createUsersUsersPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete a Reservation asynchronously
   * Delete Reservation Async
   */
  async deleteReservationAsyncReservationAsyncDeleteRaw(
    requestParameters: DeleteReservationAsyncReservationAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["reservationId"] == null) {
      throw new runtime.RequiredError(
        "reservationId",
        'Required parameter "reservationId" was null or undefined when calling deleteReservationAsyncReservationAsyncDelete().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["reservationId"] != null) {
      queryParameters["reservation_id"] = requestParameters["reservationId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/reservation/async`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete a Reservation asynchronously
   * Delete Reservation Async
   */
  async deleteReservationAsyncReservationAsyncDelete(
    requestParameters: DeleteReservationAsyncReservationAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deleteReservationAsyncReservationAsyncDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete a Reservation
   * Delete Reservation
   */
  async deleteReservationReservationDeleteRaw(
    requestParameters: DeleteReservationReservationDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Reservation>> {
    if (requestParameters["reservationId"] == null) {
      throw new runtime.RequiredError(
        "reservationId",
        'Required parameter "reservationId" was null or undefined when calling deleteReservationReservationDelete().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["reservationId"] != null) {
      queryParameters["reservation_id"] = requestParameters["reservationId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/reservation`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReservationFromJSON(jsonValue),
    );
  }

  /**
   * Delete a Reservation
   * Delete Reservation
   */
  async deleteReservationReservationDelete(
    requestParameters: DeleteReservationReservationDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Reservation> {
    const response = await this.deleteReservationReservationDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete multiple Reservations asynchronously
   * Delete Reservations Async
   */
  async deleteReservationsAsyncReservationsAsyncDeleteRaw(
    requestParameters: DeleteReservationsAsyncReservationsAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling deleteReservationsAsyncReservationsAsyncDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reservations/async`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete multiple Reservations asynchronously
   * Delete Reservations Async
   */
  async deleteReservationsAsyncReservationsAsyncDelete(
    requestParameters: DeleteReservationsAsyncReservationsAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.deleteReservationsAsyncReservationsAsyncDeleteRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Delete multiple Reservations
   * Delete Reservations
   */
  async deleteReservationsReservationsDeleteRaw(
    requestParameters: DeleteReservationsReservationsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Reservation>>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling deleteReservationsReservationsDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reservations`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReservationFromJSON),
    );
  }

  /**
   * Delete multiple Reservations
   * Delete Reservations
   */
  async deleteReservationsReservationsDelete(
    requestParameters: DeleteReservationsReservationsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Reservation>> {
    const response = await this.deleteReservationsReservationsDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete a Restaurant asynchronously
   * Delete Restaurant Async
   */
  async deleteRestaurantAsyncRestaurantAsyncDeleteRaw(
    requestParameters: DeleteRestaurantAsyncRestaurantAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["restaurantId"] == null) {
      throw new runtime.RequiredError(
        "restaurantId",
        'Required parameter "restaurantId" was null or undefined when calling deleteRestaurantAsyncRestaurantAsyncDelete().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["restaurantId"] != null) {
      queryParameters["restaurant_id"] = requestParameters["restaurantId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/restaurant/async`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete a Restaurant asynchronously
   * Delete Restaurant Async
   */
  async deleteRestaurantAsyncRestaurantAsyncDelete(
    requestParameters: DeleteRestaurantAsyncRestaurantAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deleteRestaurantAsyncRestaurantAsyncDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete a Restaurant
   * Delete Restaurant
   */
  async deleteRestaurantRestaurantDeleteRaw(
    requestParameters: DeleteRestaurantRestaurantDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Restaurant>> {
    if (requestParameters["restaurantId"] == null) {
      throw new runtime.RequiredError(
        "restaurantId",
        'Required parameter "restaurantId" was null or undefined when calling deleteRestaurantRestaurantDelete().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["restaurantId"] != null) {
      queryParameters["restaurant_id"] = requestParameters["restaurantId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/restaurant`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RestaurantFromJSON(jsonValue),
    );
  }

  /**
   * Delete a Restaurant
   * Delete Restaurant
   */
  async deleteRestaurantRestaurantDelete(
    requestParameters: DeleteRestaurantRestaurantDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Restaurant> {
    const response = await this.deleteRestaurantRestaurantDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete multiple Restaurants asynchronously
   * Delete Restaurants Async
   */
  async deleteRestaurantsAsyncRestaurantsAsyncDeleteRaw(
    requestParameters: DeleteRestaurantsAsyncRestaurantsAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling deleteRestaurantsAsyncRestaurantsAsyncDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/restaurants/async`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete multiple Restaurants asynchronously
   * Delete Restaurants Async
   */
  async deleteRestaurantsAsyncRestaurantsAsyncDelete(
    requestParameters: DeleteRestaurantsAsyncRestaurantsAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deleteRestaurantsAsyncRestaurantsAsyncDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete multiple Restaurants
   * Delete Restaurants
   */
  async deleteRestaurantsRestaurantsDeleteRaw(
    requestParameters: DeleteRestaurantsRestaurantsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Restaurant>>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling deleteRestaurantsRestaurantsDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/restaurants`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(RestaurantFromJSON),
    );
  }

  /**
   * Delete multiple Restaurants
   * Delete Restaurants
   */
  async deleteRestaurantsRestaurantsDelete(
    requestParameters: DeleteRestaurantsRestaurantsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Restaurant>> {
    const response = await this.deleteRestaurantsRestaurantsDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete a Review asynchronously
   * Delete Review Async
   */
  async deleteReviewAsyncReviewAsyncDeleteRaw(
    requestParameters: DeleteReviewAsyncReviewAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["reviewId"] == null) {
      throw new runtime.RequiredError(
        "reviewId",
        'Required parameter "reviewId" was null or undefined when calling deleteReviewAsyncReviewAsyncDelete().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["reviewId"] != null) {
      queryParameters["review_id"] = requestParameters["reviewId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/review/async`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete a Review asynchronously
   * Delete Review Async
   */
  async deleteReviewAsyncReviewAsyncDelete(
    requestParameters: DeleteReviewAsyncReviewAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deleteReviewAsyncReviewAsyncDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete a Review
   * Delete Review
   */
  async deleteReviewReviewDeleteRaw(
    requestParameters: DeleteReviewReviewDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters["reviewId"] == null) {
      throw new runtime.RequiredError(
        "reviewId",
        'Required parameter "reviewId" was null or undefined when calling deleteReviewReviewDelete().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["reviewId"] != null) {
      queryParameters["review_id"] = requestParameters["reviewId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/review`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReviewFromJSON(jsonValue),
    );
  }

  /**
   * Delete a Review
   * Delete Review
   */
  async deleteReviewReviewDelete(
    requestParameters: DeleteReviewReviewDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Review> {
    const response = await this.deleteReviewReviewDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete multiple Reviews asynchronously
   * Delete Reviews Async
   */
  async deleteReviewsAsyncReviewsAsyncDeleteRaw(
    requestParameters: DeleteReviewsAsyncReviewsAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling deleteReviewsAsyncReviewsAsyncDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reviews/async`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete multiple Reviews asynchronously
   * Delete Reviews Async
   */
  async deleteReviewsAsyncReviewsAsyncDelete(
    requestParameters: DeleteReviewsAsyncReviewsAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deleteReviewsAsyncReviewsAsyncDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete multiple Reviews
   * Delete Reviews
   */
  async deleteReviewsReviewsDeleteRaw(
    requestParameters: DeleteReviewsReviewsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Review>>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling deleteReviewsReviewsDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reviews`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReviewFromJSON),
    );
  }

  /**
   * Delete multiple Reviews
   * Delete Reviews
   */
  async deleteReviewsReviewsDelete(
    requestParameters: DeleteReviewsReviewsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Review>> {
    const response = await this.deleteReviewsReviewsDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete a User asynchronously
   * Delete User Async
   */
  async deleteUserAsyncUserAsyncDeleteRaw(
    requestParameters: DeleteUserAsyncUserAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["userId"] == null) {
      throw new runtime.RequiredError(
        "userId",
        'Required parameter "userId" was null or undefined when calling deleteUserAsyncUserAsyncDelete().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["userId"] != null) {
      queryParameters["user_id"] = requestParameters["userId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/user/async`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete a User asynchronously
   * Delete User Async
   */
  async deleteUserAsyncUserAsyncDelete(
    requestParameters: DeleteUserAsyncUserAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deleteUserAsyncUserAsyncDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete a User
   * Delete User
   */
  async deleteUserUserDeleteRaw(
    requestParameters: DeleteUserUserDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters["userId"] == null) {
      throw new runtime.RequiredError(
        "userId",
        'Required parameter "userId" was null or undefined when calling deleteUserUserDelete().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["userId"] != null) {
      queryParameters["user_id"] = requestParameters["userId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/user`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue),
    );
  }

  /**
   * Delete a User
   * Delete User
   */
  async deleteUserUserDelete(
    requestParameters: DeleteUserUserDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.deleteUserUserDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete multiple Users asynchronously
   * Delete Users Async
   */
  async deleteUsersAsyncUsersAsyncDeleteRaw(
    requestParameters: DeleteUsersAsyncUsersAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling deleteUsersAsyncUsersAsyncDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/users/async`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete multiple Users asynchronously
   * Delete Users Async
   */
  async deleteUsersAsyncUsersAsyncDelete(
    requestParameters: DeleteUsersAsyncUsersAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deleteUsersAsyncUsersAsyncDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete multiple Users
   * Delete Users
   */
  async deleteUsersUsersDeleteRaw(
    requestParameters: DeleteUsersUsersDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<User>>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling deleteUsersUsersDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/users`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UserFromJSON),
    );
  }

  /**
   * Delete multiple Users
   * Delete Users
   */
  async deleteUsersUsersDelete(
    requestParameters: DeleteUsersUsersDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<User>> {
    const response = await this.deleteUsersUsersDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get a Reservation
   * Get Reservation
   */
  async getReservationReservationGetRaw(
    requestParameters: GetReservationReservationGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Reservation>> {
    if (requestParameters["reservationId"] == null) {
      throw new runtime.RequiredError(
        "reservationId",
        'Required parameter "reservationId" was null or undefined when calling getReservationReservationGet().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["reservationId"] != null) {
      queryParameters["reservation_id"] = requestParameters["reservationId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/reservation`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReservationFromJSON(jsonValue),
    );
  }

  /**
   * Get a Reservation
   * Get Reservation
   */
  async getReservationReservationGet(
    requestParameters: GetReservationReservationGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Reservation> {
    const response = await this.getReservationReservationGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get all Reservations
   * Get Reservations
   */
  async getReservationsReservationsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Reservation>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/reservations`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReservationFromJSON),
    );
  }

  /**
   * Get all Reservations
   * Get Reservations
   */
  async getReservationsReservationsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Reservation>> {
    const response =
      await this.getReservationsReservationsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a Restaurant
   * Get Restaurant
   */
  async getRestaurantRestaurantGetRaw(
    requestParameters: GetRestaurantRestaurantGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Restaurant>> {
    if (requestParameters["restaurantId"] == null) {
      throw new runtime.RequiredError(
        "restaurantId",
        'Required parameter "restaurantId" was null or undefined when calling getRestaurantRestaurantGet().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["restaurantId"] != null) {
      queryParameters["restaurant_id"] = requestParameters["restaurantId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/restaurant`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RestaurantFromJSON(jsonValue),
    );
  }

  /**
   * Get a Restaurant
   * Get Restaurant
   */
  async getRestaurantRestaurantGet(
    requestParameters: GetRestaurantRestaurantGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Restaurant> {
    const response = await this.getRestaurantRestaurantGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get all Restaurants
   * Get Restaurants
   */
  async getRestaurantsRestaurantsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Restaurant>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/restaurants`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(RestaurantFromJSON),
    );
  }

  /**
   * Get all Restaurants
   * Get Restaurants
   */
  async getRestaurantsRestaurantsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Restaurant>> {
    const response = await this.getRestaurantsRestaurantsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a Review
   * Get Review
   */
  async getReviewReviewGetRaw(
    requestParameters: GetReviewReviewGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters["reviewId"] == null) {
      throw new runtime.RequiredError(
        "reviewId",
        'Required parameter "reviewId" was null or undefined when calling getReviewReviewGet().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["reviewId"] != null) {
      queryParameters["review_id"] = requestParameters["reviewId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/review`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReviewFromJSON(jsonValue),
    );
  }

  /**
   * Get a Review
   * Get Review
   */
  async getReviewReviewGet(
    requestParameters: GetReviewReviewGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Review> {
    const response = await this.getReviewReviewGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get all Reviews
   * Get Reviews
   */
  async getReviewsReviewsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Review>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/reviews`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReviewFromJSON),
    );
  }

  /**
   * Get all Reviews
   * Get Reviews
   */
  async getReviewsReviewsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Review>> {
    const response = await this.getReviewsReviewsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a User
   * Get User
   */
  async getUserUserGetRaw(
    requestParameters: GetUserUserGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters["userId"] == null) {
      throw new runtime.RequiredError(
        "userId",
        'Required parameter "userId" was null or undefined when calling getUserUserGet().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["userId"] != null) {
      queryParameters["user_id"] = requestParameters["userId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/user`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue),
    );
  }

  /**
   * Get a User
   * Get User
   */
  async getUserUserGet(
    requestParameters: GetUserUserGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.getUserUserGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get all Users
   * Get Users
   */
  async getUsersUsersGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<User>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UserFromJSON),
    );
  }

  /**
   * Get all Users
   * Get Users
   */
  async getUsersUsersGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<User>> {
    const response = await this.getUsersUsersGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Health Endpoint
   * Health
   */
  async healthHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/health`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Health Endpoint
   * Health
   */
  async healthHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.healthHealthGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Root Endpoint
   * Root
   */
  async rootGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Root Endpoint
   * Root
   */
  async rootGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.rootGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Update a Reservation asynchronously
   * Update Reservation Async
   */
  async updateReservationAsyncReservationAsyncPutRaw(
    requestParameters: UpdateReservationAsyncReservationAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["reservation"] == null) {
      throw new runtime.RequiredError(
        "reservation",
        'Required parameter "reservation" was null or undefined when calling updateReservationAsyncReservationAsyncPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reservation/async`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: ReservationToJSON(requestParameters["reservation"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Update a Reservation asynchronously
   * Update Reservation Async
   */
  async updateReservationAsyncReservationAsyncPut(
    requestParameters: UpdateReservationAsyncReservationAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.updateReservationAsyncReservationAsyncPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update a Reservation
   * Update Reservation
   */
  async updateReservationReservationPutRaw(
    requestParameters: UpdateReservationReservationPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Reservation>> {
    if (requestParameters["reservation"] == null) {
      throw new runtime.RequiredError(
        "reservation",
        'Required parameter "reservation" was null or undefined when calling updateReservationReservationPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reservation`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: ReservationToJSON(requestParameters["reservation"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReservationFromJSON(jsonValue),
    );
  }

  /**
   * Update a Reservation
   * Update Reservation
   */
  async updateReservationReservationPut(
    requestParameters: UpdateReservationReservationPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Reservation> {
    const response = await this.updateReservationReservationPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update multiple Reservations asynchronously
   * Update Reservations Async
   */
  async updateReservationsAsyncReservationsAsyncPutRaw(
    requestParameters: UpdateReservationsAsyncReservationsAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["reservation"] == null) {
      throw new runtime.RequiredError(
        "reservation",
        'Required parameter "reservation" was null or undefined when calling updateReservationsAsyncReservationsAsyncPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reservations/async`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["reservation"]!.map(ReservationToJSON),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Update multiple Reservations asynchronously
   * Update Reservations Async
   */
  async updateReservationsAsyncReservationsAsyncPut(
    requestParameters: UpdateReservationsAsyncReservationsAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.updateReservationsAsyncReservationsAsyncPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update multiple Reservations
   * Update Reservations
   */
  async updateReservationsReservationsPutRaw(
    requestParameters: UpdateReservationsReservationsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Reservation>>> {
    if (requestParameters["reservation"] == null) {
      throw new runtime.RequiredError(
        "reservation",
        'Required parameter "reservation" was null or undefined when calling updateReservationsReservationsPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reservations`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["reservation"]!.map(ReservationToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReservationFromJSON),
    );
  }

  /**
   * Update multiple Reservations
   * Update Reservations
   */
  async updateReservationsReservationsPut(
    requestParameters: UpdateReservationsReservationsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Reservation>> {
    const response = await this.updateReservationsReservationsPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update a Restaurant asynchronously
   * Update Restaurant Async
   */
  async updateRestaurantAsyncRestaurantAsyncPutRaw(
    requestParameters: UpdateRestaurantAsyncRestaurantAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["restaurant"] == null) {
      throw new runtime.RequiredError(
        "restaurant",
        'Required parameter "restaurant" was null or undefined when calling updateRestaurantAsyncRestaurantAsyncPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/restaurant/async`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: RestaurantToJSON(requestParameters["restaurant"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Update a Restaurant asynchronously
   * Update Restaurant Async
   */
  async updateRestaurantAsyncRestaurantAsyncPut(
    requestParameters: UpdateRestaurantAsyncRestaurantAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.updateRestaurantAsyncRestaurantAsyncPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update a Restaurant
   * Update Restaurant
   */
  async updateRestaurantRestaurantPutRaw(
    requestParameters: UpdateRestaurantRestaurantPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Restaurant>> {
    if (requestParameters["restaurant"] == null) {
      throw new runtime.RequiredError(
        "restaurant",
        'Required parameter "restaurant" was null or undefined when calling updateRestaurantRestaurantPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/restaurant`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: RestaurantToJSON(requestParameters["restaurant"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RestaurantFromJSON(jsonValue),
    );
  }

  /**
   * Update a Restaurant
   * Update Restaurant
   */
  async updateRestaurantRestaurantPut(
    requestParameters: UpdateRestaurantRestaurantPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Restaurant> {
    const response = await this.updateRestaurantRestaurantPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update multiple Restaurants asynchronously
   * Update Restaurants Async
   */
  async updateRestaurantsAsyncRestaurantsAsyncPutRaw(
    requestParameters: UpdateRestaurantsAsyncRestaurantsAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["restaurant"] == null) {
      throw new runtime.RequiredError(
        "restaurant",
        'Required parameter "restaurant" was null or undefined when calling updateRestaurantsAsyncRestaurantsAsyncPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/restaurants/async`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["restaurant"]!.map(RestaurantToJSON),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Update multiple Restaurants asynchronously
   * Update Restaurants Async
   */
  async updateRestaurantsAsyncRestaurantsAsyncPut(
    requestParameters: UpdateRestaurantsAsyncRestaurantsAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.updateRestaurantsAsyncRestaurantsAsyncPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update multiple Restaurants
   * Update Restaurants
   */
  async updateRestaurantsRestaurantsPutRaw(
    requestParameters: UpdateRestaurantsRestaurantsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Restaurant>>> {
    if (requestParameters["restaurant"] == null) {
      throw new runtime.RequiredError(
        "restaurant",
        'Required parameter "restaurant" was null or undefined when calling updateRestaurantsRestaurantsPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/restaurants`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["restaurant"]!.map(RestaurantToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(RestaurantFromJSON),
    );
  }

  /**
   * Update multiple Restaurants
   * Update Restaurants
   */
  async updateRestaurantsRestaurantsPut(
    requestParameters: UpdateRestaurantsRestaurantsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Restaurant>> {
    const response = await this.updateRestaurantsRestaurantsPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update a Review asynchronously
   * Update Review Async
   */
  async updateReviewAsyncReviewAsyncPutRaw(
    requestParameters: UpdateReviewAsyncReviewAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling updateReviewAsyncReviewAsyncPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/review/async`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: ReviewToJSON(requestParameters["review"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Update a Review asynchronously
   * Update Review Async
   */
  async updateReviewAsyncReviewAsyncPut(
    requestParameters: UpdateReviewAsyncReviewAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.updateReviewAsyncReviewAsyncPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update a Review
   * Update Review
   */
  async updateReviewReviewPutRaw(
    requestParameters: UpdateReviewReviewPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling updateReviewReviewPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/review`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: ReviewToJSON(requestParameters["review"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReviewFromJSON(jsonValue),
    );
  }

  /**
   * Update a Review
   * Update Review
   */
  async updateReviewReviewPut(
    requestParameters: UpdateReviewReviewPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Review> {
    const response = await this.updateReviewReviewPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update multiple Reviews asynchronously
   * Update Reviews Async
   */
  async updateReviewsAsyncReviewsAsyncPutRaw(
    requestParameters: UpdateReviewsAsyncReviewsAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling updateReviewsAsyncReviewsAsyncPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reviews/async`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["review"]!.map(ReviewToJSON),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Update multiple Reviews asynchronously
   * Update Reviews Async
   */
  async updateReviewsAsyncReviewsAsyncPut(
    requestParameters: UpdateReviewsAsyncReviewsAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.updateReviewsAsyncReviewsAsyncPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update multiple Reviews
   * Update Reviews
   */
  async updateReviewsReviewsPutRaw(
    requestParameters: UpdateReviewsReviewsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Review>>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling updateReviewsReviewsPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reviews`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["review"]!.map(ReviewToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReviewFromJSON),
    );
  }

  /**
   * Update multiple Reviews
   * Update Reviews
   */
  async updateReviewsReviewsPut(
    requestParameters: UpdateReviewsReviewsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Review>> {
    const response = await this.updateReviewsReviewsPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update a User asynchronously
   * Update User Async
   */
  async updateUserAsyncUserAsyncPutRaw(
    requestParameters: UpdateUserAsyncUserAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["user"] == null) {
      throw new runtime.RequiredError(
        "user",
        'Required parameter "user" was null or undefined when calling updateUserAsyncUserAsyncPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/user/async`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UserToJSON(requestParameters["user"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Update a User asynchronously
   * Update User Async
   */
  async updateUserAsyncUserAsyncPut(
    requestParameters: UpdateUserAsyncUserAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.updateUserAsyncUserAsyncPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update a User
   * Update User
   */
  async updateUserUserPutRaw(
    requestParameters: UpdateUserUserPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters["user"] == null) {
      throw new runtime.RequiredError(
        "user",
        'Required parameter "user" was null or undefined when calling updateUserUserPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/user`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UserToJSON(requestParameters["user"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue),
    );
  }

  /**
   * Update a User
   * Update User
   */
  async updateUserUserPut(
    requestParameters: UpdateUserUserPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.updateUserUserPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update multiple Users asynchronously
   * Update Users Async
   */
  async updateUsersAsyncUsersAsyncPutRaw(
    requestParameters: UpdateUsersAsyncUsersAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["user"] == null) {
      throw new runtime.RequiredError(
        "user",
        'Required parameter "user" was null or undefined when calling updateUsersAsyncUsersAsyncPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/users/async`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["user"]!.map(UserToJSON),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Update multiple Users asynchronously
   * Update Users Async
   */
  async updateUsersAsyncUsersAsyncPut(
    requestParameters: UpdateUsersAsyncUsersAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.updateUsersAsyncUsersAsyncPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update multiple Users
   * Update Users
   */
  async updateUsersUsersPutRaw(
    requestParameters: UpdateUsersUsersPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<User>>> {
    if (requestParameters["user"] == null) {
      throw new runtime.RequiredError(
        "user",
        'Required parameter "user" was null or undefined when calling updateUsersUsersPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/users`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["user"]!.map(UserToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UserFromJSON),
    );
  }

  /**
   * Update multiple Users
   * Update Users
   */
  async updateUsersUsersPut(
    requestParameters: UpdateUsersUsersPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<User>> {
    const response = await this.updateUsersUsersPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
