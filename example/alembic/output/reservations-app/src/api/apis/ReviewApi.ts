/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { HTTPValidationError, Review } from "../models/index";
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  ReviewFromJSON,
  ReviewToJSON,
} from "../models/index";

export interface CreateReviewAsyncReviewAsyncPostRequest {
  review: Review;
}

export interface CreateReviewReviewPostRequest {
  review: Review;
}

export interface CreateReviewsAsyncReviewsAsyncPostRequest {
  review: Array<Review>;
}

export interface CreateReviewsReviewsPostRequest {
  review: Array<Review>;
}

export interface DeleteReviewAsyncReviewAsyncDeleteRequest {
  reviewId: string;
}

export interface DeleteReviewReviewDeleteRequest {
  reviewId: string;
}

export interface DeleteReviewsAsyncReviewsAsyncDeleteRequest {
  requestBody: Array<string>;
}

export interface DeleteReviewsReviewsDeleteRequest {
  requestBody: Array<string>;
}

export interface GetReviewReviewGetRequest {
  reviewId: string;
}

export interface UpdateReviewAsyncReviewAsyncPutRequest {
  review: Review;
}

export interface UpdateReviewReviewPutRequest {
  review: Review;
}

export interface UpdateReviewsAsyncReviewsAsyncPutRequest {
  review: Array<Review>;
}

export interface UpdateReviewsReviewsPutRequest {
  review: Array<Review>;
}

/**
 *
 */
export class ReviewApi extends runtime.BaseAPI {
  /**
   * Create a Review asynchronously
   * Create Review Async
   */
  async createReviewAsyncReviewAsyncPostRaw(
    requestParameters: CreateReviewAsyncReviewAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling createReviewAsyncReviewAsyncPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/review/async`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ReviewToJSON(requestParameters["review"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create a Review asynchronously
   * Create Review Async
   */
  async createReviewAsyncReviewAsyncPost(
    requestParameters: CreateReviewAsyncReviewAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createReviewAsyncReviewAsyncPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create a Review
   * Create Review
   */
  async createReviewReviewPostRaw(
    requestParameters: CreateReviewReviewPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling createReviewReviewPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/review`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ReviewToJSON(requestParameters["review"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReviewFromJSON(jsonValue),
    );
  }

  /**
   * Create a Review
   * Create Review
   */
  async createReviewReviewPost(
    requestParameters: CreateReviewReviewPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Review> {
    const response = await this.createReviewReviewPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create multiple Reviews asynchronously
   * Create Reviews Async
   */
  async createReviewsAsyncReviewsAsyncPostRaw(
    requestParameters: CreateReviewsAsyncReviewsAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling createReviewsAsyncReviewsAsyncPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reviews/async`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["review"]!.map(ReviewToJSON),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create multiple Reviews asynchronously
   * Create Reviews Async
   */
  async createReviewsAsyncReviewsAsyncPost(
    requestParameters: CreateReviewsAsyncReviewsAsyncPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createReviewsAsyncReviewsAsyncPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create multiple Reviews
   * Create Reviews
   */
  async createReviewsReviewsPostRaw(
    requestParameters: CreateReviewsReviewsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Review>>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling createReviewsReviewsPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reviews`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["review"]!.map(ReviewToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReviewFromJSON),
    );
  }

  /**
   * Create multiple Reviews
   * Create Reviews
   */
  async createReviewsReviewsPost(
    requestParameters: CreateReviewsReviewsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Review>> {
    const response = await this.createReviewsReviewsPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete a Review asynchronously
   * Delete Review Async
   */
  async deleteReviewAsyncReviewAsyncDeleteRaw(
    requestParameters: DeleteReviewAsyncReviewAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["reviewId"] == null) {
      throw new runtime.RequiredError(
        "reviewId",
        'Required parameter "reviewId" was null or undefined when calling deleteReviewAsyncReviewAsyncDelete().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["reviewId"] != null) {
      queryParameters["review_id"] = requestParameters["reviewId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/review/async`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete a Review asynchronously
   * Delete Review Async
   */
  async deleteReviewAsyncReviewAsyncDelete(
    requestParameters: DeleteReviewAsyncReviewAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deleteReviewAsyncReviewAsyncDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete a Review
   * Delete Review
   */
  async deleteReviewReviewDeleteRaw(
    requestParameters: DeleteReviewReviewDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters["reviewId"] == null) {
      throw new runtime.RequiredError(
        "reviewId",
        'Required parameter "reviewId" was null or undefined when calling deleteReviewReviewDelete().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["reviewId"] != null) {
      queryParameters["review_id"] = requestParameters["reviewId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/review`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReviewFromJSON(jsonValue),
    );
  }

  /**
   * Delete a Review
   * Delete Review
   */
  async deleteReviewReviewDelete(
    requestParameters: DeleteReviewReviewDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Review> {
    const response = await this.deleteReviewReviewDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete multiple Reviews asynchronously
   * Delete Reviews Async
   */
  async deleteReviewsAsyncReviewsAsyncDeleteRaw(
    requestParameters: DeleteReviewsAsyncReviewsAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling deleteReviewsAsyncReviewsAsyncDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reviews/async`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete multiple Reviews asynchronously
   * Delete Reviews Async
   */
  async deleteReviewsAsyncReviewsAsyncDelete(
    requestParameters: DeleteReviewsAsyncReviewsAsyncDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deleteReviewsAsyncReviewsAsyncDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete multiple Reviews
   * Delete Reviews
   */
  async deleteReviewsReviewsDeleteRaw(
    requestParameters: DeleteReviewsReviewsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Review>>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling deleteReviewsReviewsDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reviews`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReviewFromJSON),
    );
  }

  /**
   * Delete multiple Reviews
   * Delete Reviews
   */
  async deleteReviewsReviewsDelete(
    requestParameters: DeleteReviewsReviewsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Review>> {
    const response = await this.deleteReviewsReviewsDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get a Review
   * Get Review
   */
  async getReviewReviewGetRaw(
    requestParameters: GetReviewReviewGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters["reviewId"] == null) {
      throw new runtime.RequiredError(
        "reviewId",
        'Required parameter "reviewId" was null or undefined when calling getReviewReviewGet().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["reviewId"] != null) {
      queryParameters["review_id"] = requestParameters["reviewId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/review`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReviewFromJSON(jsonValue),
    );
  }

  /**
   * Get a Review
   * Get Review
   */
  async getReviewReviewGet(
    requestParameters: GetReviewReviewGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Review> {
    const response = await this.getReviewReviewGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get all Reviews
   * Get Reviews
   */
  async getReviewsReviewsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Review>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/reviews`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReviewFromJSON),
    );
  }

  /**
   * Get all Reviews
   * Get Reviews
   */
  async getReviewsReviewsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Review>> {
    const response = await this.getReviewsReviewsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Update a Review asynchronously
   * Update Review Async
   */
  async updateReviewAsyncReviewAsyncPutRaw(
    requestParameters: UpdateReviewAsyncReviewAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling updateReviewAsyncReviewAsyncPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/review/async`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: ReviewToJSON(requestParameters["review"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Update a Review asynchronously
   * Update Review Async
   */
  async updateReviewAsyncReviewAsyncPut(
    requestParameters: UpdateReviewAsyncReviewAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.updateReviewAsyncReviewAsyncPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update a Review
   * Update Review
   */
  async updateReviewReviewPutRaw(
    requestParameters: UpdateReviewReviewPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling updateReviewReviewPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/review`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: ReviewToJSON(requestParameters["review"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReviewFromJSON(jsonValue),
    );
  }

  /**
   * Update a Review
   * Update Review
   */
  async updateReviewReviewPut(
    requestParameters: UpdateReviewReviewPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Review> {
    const response = await this.updateReviewReviewPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update multiple Reviews asynchronously
   * Update Reviews Async
   */
  async updateReviewsAsyncReviewsAsyncPutRaw(
    requestParameters: UpdateReviewsAsyncReviewsAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling updateReviewsAsyncReviewsAsyncPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reviews/async`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["review"]!.map(ReviewToJSON),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Update multiple Reviews asynchronously
   * Update Reviews Async
   */
  async updateReviewsAsyncReviewsAsyncPut(
    requestParameters: UpdateReviewsAsyncReviewsAsyncPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.updateReviewsAsyncReviewsAsyncPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update multiple Reviews
   * Update Reviews
   */
  async updateReviewsReviewsPutRaw(
    requestParameters: UpdateReviewsReviewsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Review>>> {
    if (requestParameters["review"] == null) {
      throw new runtime.RequiredError(
        "review",
        'Required parameter "review" was null or undefined when calling updateReviewsReviewsPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/reviews`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["review"]!.map(ReviewToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReviewFromJSON),
    );
  }

  /**
   * Update multiple Reviews
   * Update Reviews
   */
  async updateReviewsReviewsPut(
    requestParameters: UpdateReviewsReviewsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Review>> {
    const response = await this.updateReviewsReviewsPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
