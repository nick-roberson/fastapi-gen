# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from openapi_client.models.id3 import Id3
from openapi_client.models.phone_number import PhoneNumber
from openapi_client.models.preferences import Preferences
from openapi_client.models.role import Role
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self


class User(BaseModel):
    """
    User
    """  # noqa: E501

    id: Optional[Id3] = None
    username: StrictStr = Field(description="The username of the user")
    email: StrictStr = Field(description="The email address of the user")
    phone_number: Optional[PhoneNumber] = None
    preferences: Optional[Preferences] = None
    role: Optional[Role] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "username",
        "email",
        "phone_number",
        "preferences",
        "role",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict["id"] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone_number
        if self.phone_number:
            _dict["phone_number"] = self.phone_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preferences
        if self.preferences:
            _dict["preferences"] = self.preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict["role"] = self.role.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": Id3.from_dict(obj["id"]) if obj.get("id") is not None else None,
                "username": obj.get("username"),
                "email": obj.get("email"),
                "phone_number": (
                    PhoneNumber.from_dict(obj["phone_number"])
                    if obj.get("phone_number") is not None
                    else None
                ),
                "preferences": (
                    Preferences.from_dict(obj["preferences"])
                    if obj.get("preferences") is not None
                    else None
                ),
                "role": (
                    Role.from_dict(obj["role"]) if obj.get("role") is not None else None
                ),
            }
        )
        return _obj
