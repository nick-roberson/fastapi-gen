# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from openapi_client.models.cuisine import Cuisine
from openapi_client.models.id1 import Id1
from openapi_client.models.price_range import PriceRange
from openapi_client.models.rating import Rating
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self


class Restaurant(BaseModel):
    """
    Restaurant
    """ # noqa: E501
    id: Optional[Id1] = None
    name: StrictStr = Field(description="The name of the restaurant")
    location: StrictStr = Field(description="The physical location of the restaurant")
    cuisine: Optional[Cuisine] = None
    rating: Optional[Rating] = None
    price_range: Optional[PriceRange] = None
    __properties: ClassVar[List[str]] = ["id", "name", "location", "cuisine", "rating", "price_range"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Restaurant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cuisine
        if self.cuisine:
            _dict['cuisine'] = self.cuisine.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_range
        if self.price_range:
            _dict['price_range'] = self.price_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Restaurant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": Id1.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "name": obj.get("name"),
            "location": obj.get("location"),
            "cuisine": Cuisine.from_dict(obj["cuisine"]) if obj.get("cuisine") is not None else None,
            "rating": Rating.from_dict(obj["rating"]) if obj.get("rating") is not None else None,
            "price_range": PriceRange.from_dict(obj["price_range"]) if obj.get("price_range") is not None else None
        })
        return _obj
